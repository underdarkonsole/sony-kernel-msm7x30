From cae95dfe1cf54f2c88aa6d1d1c56dcdcdfad792b Mon Sep 17 00:00:00 2001
From: Keiran Collins <keiran@darkforestgroup.com>
Date: Sun, 8 Apr 2012 11:21:06 +0100
Subject: [PATCH] patched acpuclock-7x30 for 1.6GHz overclock

---
 arch/arm/mach-msm/acpuclock-7x30.c |   54 ++++++++++++++++++++++-------------
 1 files changed, 34 insertions(+), 20 deletions(-)

diff --git a/arch/arm/mach-msm/acpuclock-7x30.c b/arch/arm/mach-msm/acpuclock-7x30.c
index bb483b1..12f0c88 100644
--- a/arch/arm/mach-msm/acpuclock-7x30.c
+++ b/arch/arm/mach-msm/acpuclock-7x30.c
@@ -93,9 +93,17 @@ struct clkctl_acpu_speed {
 
 static struct pll pll2_tbl[] = {
 	{  42, 0, 1, 0 }, /*  806 MHz */
+	{  48, 1, 3, 0 }, /*  921 MHz */	
 	{  53, 1, 3, 0 }, /* 1024 MHz */
-	{ 125, 0, 1, 1 }, /* 1200 MHz */
-	{  73, 0, 1, 0 }, /* 1401 MHz */
+	{  58, 1, 3, 0 }, /* 1113 MHz */
+	{  63, 1, 3, 0 }, /* 1209 MHz */
+	{  68, 1, 3, 0 }, /* 1305 MHz */
+	{  73, 1, 3, 0 }, /* 1401 MHz */
+	{  78, 1, 3, 0 }, /* 1516 MHz */
+	{  83, 1, 3, 0 }, /* 1612 MHz */
+	{  88, 1, 3, 0 }, /* 1708 MHz */
+	{  93, 1, 3, 0 }, /* 1804 MHz */
+	{  98, 1, 3, 0 }, /* 1900 MHz */
 };
 
 /* Use negative numbers for sources that can't be enabled/disabled */
@@ -108,22 +116,28 @@ struct clkctl_acpu_speed {
  * know all the h/w requirements.
  */
 static struct clkctl_acpu_speed acpu_freq_tbl[] = {
-	{ 0, 24576,  SRC_LPXO, 0, 0,  30720000,  900, VDD_RAW(900) },
-	{ 0, 61440,  PLL_3,    5, 11, 61440000,  900, VDD_RAW(900) },
-	{ 1, 122880, PLL_3,    5, 5,  61440000,  900, VDD_RAW(900) },
-	{ 0, 184320, PLL_3,    5, 4,  61440000,  900, VDD_RAW(900) },
-	{ 0, MAX_AXI_KHZ, SRC_AXI, 1, 0, 61440000, 900, VDD_RAW(900) },
-	{ 1, 245760, PLL_3,    5, 2,  61440000,  900, VDD_RAW(900) },
-	{ 1, 368640, PLL_3,    5, 1,  122800000, 900, VDD_RAW(900) },
-	/* AXI has MSMC1 implications. See above. */
-	{ 1, 768000, PLL_1,    2, 0,  153600000, 1050, VDD_RAW(1050) },
-	/*
-	 * AXI has MSMC1 implications. See above.
-	 */
-	{ 1, 806400,  PLL_2, 3, 0, UINT_MAX, 1100, VDD_RAW(1100), &pll2_tbl[0]},
-	{ 1, 1024000, PLL_2, 3, 0, UINT_MAX, 1200, VDD_RAW(1200), &pll2_tbl[1]},
-	{ 1, 1200000, PLL_2, 3, 0, UINT_MAX, 1200, VDD_RAW(1200), &pll2_tbl[2]},
-	{ 1, 1401600, PLL_2, 3, 0, UINT_MAX, 1250, VDD_RAW(1250), &pll2_tbl[3]},
+	{ 0, 24576,SRC_LPXO, 0, 0,  30720000,  900, VDD_RAW(900) },
+	{ 1, 61440,   PLL_3, 5, 11, 61440000,  900, VDD_RAW(900) },
+	{ 1, 122880,  PLL_3, 5, 5,  61440000,  900, VDD_RAW(900) },
+	{ 1, 184320,  PLL_3, 5, 4,  61440000,  900, VDD_RAW(900) },
+	{ 1, 245760,  PLL_3, 5, 2,  61440000,  900, VDD_RAW(900) },
+	{ 1, 368640,  PLL_3, 5, 1,  122800000, 900, VDD_RAW(900) },
+	{ 1, 460800,  PLL_1, 2, 0,  153600000, 900, VDD_RAW(900) },
+	{ 1, 576000,  PLL_1, 2, 0,  153600000, 950, VDD_RAW(950) },
+	{ 1, 652800,  PLL_1, 2, 0,  153600000, 950, VDD_RAW(950) },
+	{ 1, 768000,  PLL_1, 2, 0,  153600000, 950, VDD_RAW(950) },
+	{ 1, 806400,  PLL_2, 3, 0, UINT_MAX, 1000, VDD_RAW(1000), &pll2_tbl[0]},
+	{ 1, 921600,  PLL_2, 3, 0, UINT_MAX, 1000, VDD_RAW(1000), &pll2_tbl[1]},
+	{ 1, 1024000, PLL_2, 3, 0, UINT_MAX, 1000, VDD_RAW(1000), &pll2_tbl[2]},
+	{ 1, 1113000, PLL_2, 3, 0, UINT_MAX, 1050, VDD_RAW(1050), &pll2_tbl[3]},
+	{ 1, 1209600, PLL_2, 3, 0, UINT_MAX, 1100, VDD_RAW(1100), &pll2_tbl[4]},
+	{ 1, 1305600, PLL_2, 3, 0, UINT_MAX, 1150, VDD_RAW(1150), &pll2_tbl[5]},
+	{ 1, 1401600, PLL_2, 3, 0, UINT_MAX, 1200, VDD_RAW(1200), &pll2_tbl[6]},
+	{ 1, 1516800, PLL_2, 3, 0, UINT_MAX, 1250, VDD_RAW(1250), &pll2_tbl[7]},
+	{ 1, 1612800, PLL_2, 3, 0, UINT_MAX, 1300, VDD_RAW(1350), &pll2_tbl[8]},
+	{ 0, 1708800, PLL_2, 3, 0, UINT_MAX, 1350, VDD_RAW(1350), &pll2_tbl[9]},
+	{ 0, 1804800, PLL_2, 3, 0, UINT_MAX, 1350, VDD_RAW(1350), &pll2_tbl[10]},
+	{ 0, 1900800, PLL_2, 3, 0, UINT_MAX, 1450, VDD_RAW(1450), &pll2_tbl[11]},
 	{ 0 }
 };
 
@@ -457,8 +471,8 @@ void __init pll2_fixup(void)
 		if (speed->src != PLL_2)
 			backup_s = speed;
 		if (speed->pll_rate && speed->pll_rate->l == pll2_l) {
-			speed++;
-			speed->acpu_clk_khz = 0;
+//			speed++;
+//			speed->acpu_clk_khz = 0;
 			return;
 		}
 	}
-- 
1.7.5.4

